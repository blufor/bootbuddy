#!/usr/bin/env ruby

require 'rubygem' if RUBY_VERSION < "1.9.0"
require 'yaml'
require 'open-uri'
require 'optparse'


class BBWiz

  attr_accessor :config
  attr_accessor :options
  attr_accessor :target
  attr_accessor :op

  def initialize
    self.config = self.read_config("/etc/bootbuddy.yaml")
    self.parse_opts
    puts self.op if self.options.values.delete_if(){ |v| v == false }.length == 0
    if self.options.values.delete_if(){ |v| v == false }.length > 1
      puts "Can't use multiple options at once"
      exit 1
    end
    self.download(self.dlist) if self.options[:download]
    self.sync(self.dlist) if self.options[:sync]
    self.grub_conf if self.options[:grub_conf]
  end

  def download filelist
    threads = []
    filelist.each do |file|
      if File.exists?(self.target + "/" + file["filename"])
        puts "Already got #{file["filename"]} - not downloading"
      else
        puts "Starting download: #{file["filename"]} (#{file["url"]})"
        threads << Thread.new do
          begin
            open(self.target + "/" + file["filename"], "wb") { |image| image << open(file["url"]).read }
            puts "Finished downloading: " + file["filename"]
          rescue Exception => e
            puts "Failed downloading: " + file["url"] + " - " + e.message
            FileUtils.rm(self.target + "/" + file["filename"])
          end
        end
      end
    end
    threads.each { |thread| thread.join }
  end

  def sync filelist
    filelist.each do |file|
      puts file["filename"]
    end
  end

  def dlist
    list = []
    self.config["systems"].each do |sys|
      url = self.config["sources"][sys["source"]]["url_template"].to_s.gsub(/<VER>/, sys["version"]).gsub(/<ARCH>/, sys["arch"])
      filename = "#{sys["source"]}-#{sys["version"]}-#{sys["arch"]}.iso"
      list << { "url" => url, "filename" => filename }
      url = nil
      filename = nil
    end
    return list.uniq
  end

  def grub_conf
    head = []
    head << "# autogenerated by BootBuddy"
    head << ""
    head << "set isopath=/iso"
    head << "export isopath"
    head << ""
    head << ""

    body = []
    self.config["systems"].each do |sys|
      isofile = "#{sys["source"]}-#{sys["version"]}-#{sys["arch"]}.iso"
      title = "#{sys["title"]} #{sys["version"]} [#{sys["arch"]}]"
      kernel = self.config["sources"]
      body << "menuentry \"#{title}\" {"
      body << "  set isofile=\"#{isofile}\""
      body << "  set isofile_full=\"${isopath}/#{isofile}\""
      body << "  echo \"Booting #{title}...\""
      body << "  echo \"Using ${isofile_full}...\""
      body << "  loopback loop $isofile_full"
      body << "  linux (loop)#{sys["kernel_path"]} #{sys["kernel_opts"]} --"
      body << "  initrd (loop)#{sys["initrd_path"]}"
      body << "}"
      body << ""
      # body <<
    end

    puts head.join("\n")
    puts body.join("\n")

  end

  def read_config file
    begin
      YAML.load_file(file)
    rescue
      puts "Failed to read " + file
      exit 1
    end
  end

  def parse_opts
    options = {}
    self.op = OptionParser.new do |opts|
      opts.banner = "Usage: bb_wiz.rb [options]"

      options[:grub_conf] = false
      opts.on( '-g', '--grub_conf', 'Generate grub config' ) do
        options[:grub_conf] = true
      end

      options[:download] = false
      opts.on( '-d', '--download[=DIRECTORY]', 'Download configured ISO images into specified DIRECTORY (default=/tmp/iso)' ) do |directory|
        directory ||= "/tmp/iso"
        options[:download] = true
        self.target = directory
      end

      options[:sync] = false
      opts.on( '-s', '--sync', 'List of ISOs for rsync') do |directory|
        options[:sync] = true
      end
    end
    self.op.parse!
    self.options = options
  end

end

BBWiz.new
